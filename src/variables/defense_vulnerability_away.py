# -*- coding: utf-8 -*-
"""
defense_vulnerability_away.py
"""

import numpy as np
from common.common import Util
from data.sports_dataset_frame import SportsDatasetFrame

class DefenseVulnerabilityAway:
    """
    DefenseVulnerabilityAway
    """

    def __init__(self):
        self.__sports_dataset_frame = None
        self.__match_status_id = None
        self.__home_players = []
        self.__home_players_x = []
        self.__home_players_y = []
        self.__home_attack_direction = None
        self.__away_players = []
        self.__away_players_x = []
        self.__away_players_y = []
        self.__away_attack_direction = None

    def __set_frame(self, frame: SportsDatasetFrame):
        self.__sports_dataset_frame = frame
        self.__match_status_id = self.__sports_dataset_frame.get_match_status_id()

        self.__home_players = self.__sports_dataset_frame.get_home_players()
        self.__home_players_x, self.__home_players_y =\
            self.__sports_dataset_frame.get_home_players_points()
        self.__home_attack_direction = self.__sports_dataset_frame.get_home_attack_direction()

        self.__away_players = self.__sports_dataset_frame.get_away_players()
        self.__away_players_x, self.__away_players_y =\
            self.__sports_dataset_frame.get_away_players_points()
        self.__away_attack_direction = self.__sports_dataset_frame.get_away_attack_direction()

    def get_name(self):
        """
        get_name
        """
        return self.__class__.__name__

    def get_value(self, frame: SportsDatasetFrame):
        """
        get_value
        """
        self.__set_frame(frame)

        _, _, z_index = self.__calculate_defense(
            self.__away_players_x, self.__away_players_y,
            self.__home_players_x, self.__home_players_y,
            self.__get_offside_line(),
            self.__away_attack_direction)
        return self.__count_array(z_index)

    def __get_offside_line(self):
        """
        自チームで2番目に後方のx座標を取得
        """
        if self.__away_attack_direction:
            return Util.min2(self.__away_players_x)
        else:
            return Util.max2(self.__away_players_x)

    @staticmethod
    def __count_array(data_array):
        all_grid, target_grid = 0., 0.
        for _data_array in data_array:
            for _data in _data_array:
                all_grid += 1.
                if _data == 1:
                    target_grid += 1.
        return target_grid / all_grid

    @staticmethod
    def __calculate_defense(friend_px, friend_py, enemy_px, enemy_py, friend_offside_line, friend_direction):
        '''
        :param array friend_px:             point x array of friend team.
        :param array friend_py:             point y array of friend team.
        :param array enemy_px:              point x array of enemy team.
        :param array enemy_py:              point y array of enemy team.
        :param float friend_offside_line:   offside line of friend team.
        :param boolean friend_direction:    friend attack direction.
        :                                   POSITIVE = TRUE, NEGATIVE = FALSE.
        以下の条件を満たす領域の面積を算出する。
        ・味方オフサイドライン付近（敵陣10m，味方陣5m）
        ・最寄りプレイヤーが敵プレイヤー
        ・味方プレイヤーから5m以上離れている
        この面積を味方プレイヤーの守備力を表す指標とする。
        '''

        field_width = 105.
        field_height = 68.

        X, Y = np.mgrid[-field_width / 2. : field_width / 2. : 106j, -field_height / 2. : field_height / 2. : 69j]
        Z = np.ones((106,69))

        for s in range(106):
            for t in range(69):
                x, y = X[s][t], Y[s][t]
                # 味方オフサイドライン付近（敵陣10m，味方陣5m）領域
                if friend_direction:
                    if not -5 < x - friend_offside_line < 10:
                        Z[s][t] = 0
                        continue
                else:
                    if not -10 < x - friend_offside_line < 5:
                        Z[s][t] = 0
                        continue
                # 最寄りプレイヤーが敵の領域
                friend_distance, enemy_distance = None, None
                for _px, _py in zip(friend_px, friend_py):
                    distance = ((x - _px) ** 2. + (y - _py) ** 2.) ** .5
                    if friend_distance is None or friend_distance > distance:
                        friend_distance = distance
                for _px, _py in zip(enemy_px, enemy_py):
                    distance = ((x - _px) ** 2. + (y - _py) ** 2.) ** .5
                    if enemy_distance is None or enemy_distance > distance:
                        enemy_distance = distance
                if not enemy_distance < friend_distance:
                    Z[s][t] = 0
                    continue
                # 味方プレイヤーから5m以上離れている領域
                for _px, _py in zip(friend_px, friend_py):
                    distance = ((x - _px) ** 2. + (y - _py) ** 2.) ** .5
                    if not distance > 5.:
                        Z[s][t] = 0
                        continue
        return X, Y, Z
